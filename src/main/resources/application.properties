spring.application.name=EasyInstaller
spring.shell.interactive.enabled=true

# Set the logging level to ERROR to reduce startup information
logging.level.root=ERROR
logging.level.org.springframework=ERROR
logging.level.com.tomassirio.easyinstaller=ERROR

# Customize the Spring Boot startup banner
spring.main.banner-mode=console

shell.out.info=CYAN
shell.out.success=GREEN
shell.out.warning=YELLOW
shell.out.error=RED
shell.out.output=LIGHT_PINK

# Package Managers
command.default.brew = curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | /bin/bash
command.default.apt = wget http://us.archive.ubuntu.com/ubuntu/pool/main/a/apt/apt_1.9.3_amd64.deb -O apt_1.9.3_amd64.deb && sudo dpkg -i apt_1.9.3_amd64.deb && sudo apt-get install -f
command.default.nix = curl -L https://nixos.org/nix/install | sh
command.default.conda = curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && bash Miniconda3-latest-Linux-x86_64.sh

# Shell and Terminal Enhancements
command.default.zsh = sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
command.default.fish = curl -L https://get.oh-my.fish > install_fish.fish && fish install_fish.fish && rm install_fish.fish
command.default.iterm = curl -L https://iterm2.com/shell_integration/bash -o ~/.iterm2_shell_integration.bash
command.default.alacritty = curl -LO https://github.com/alacritty/alacritty/releases/download/v<VERSION>/Alacritty-v<VERSION>-x86_64.tar.gz && tar -xzvf Alacritty-v<VERSION>-x86_64.tar.gz
command.default.starship = curl -fsSL https://starship.rs/install.sh | sh

# IDEs and Text Editors
command.default.vscode = curl -L "https://code.visualstudio.com/sha/download?build=stable&os=linux-x64" -o vscode.tar.gz && tar -xzvf vscode.tar.gz && rm vscode.tar.gz
command.default.sublime = curl -O https://download.sublimetext.com/sublime_text_build_<VERSION>_x64.tar.gz && tar -xvf sublime_text_build_<VERSION>_x64.tar.gz && rm sublime_text_build_<VERSION>_x64.tar.gz
command.default.atom = curl -LO https://atom.io/download/deb && sudo dpkg -i atom-amd64.deb
command.default.pycharm = curl -L https://download.jetbrains.com/python/pycharm-community-<VERSION>.tar.gz | tar xz -C /opt/
command.default.eclipse = curl -L "https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/<VERSION>/eclipse-java-<VERSION>-linux-gtk-x86_64.tar.gz" | tar xz -C /opt/

# Version Control Systems
command.default.git = curl -O https://mirrors.edge.kernel.org/pub/software/scm/git/git-<VERSION>.tar.gz && tar -xzvf git-<VERSION>.tar.gz && cd git-<VERSION> && make prefix=/usr/local all && sudo make prefix=/usr/local install
command.default.github_cli = curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && sudo apt update && sudo apt install gh
command.default.gitkraken = curl -LO https://release.gitkraken.com/linux/gitkraken-amd64.deb && sudo dpkg -i gitkraken-amd64.deb

# Command-Line Tools
command.default.tmux = curl -LO https://github.com/tmux/tmux/releases/download/<VERSION>/tmux-<VERSION>.tar.gz && tar -xzvf tmux-<VERSION>.tar.gz && cd tmux-<VERSION> && ./configure && make && sudo make install
command.default.fzf = git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install
command.default.ripgrep = curl -LO https://github.com/BurntSushi/ripgrep/releases/download/<VERSION>/ripgrep-<VERSION>-x86_64-unknown-linux-musl.tar.gz && tar -xzvf ripgrep-<VERSION>-x86_64-unknown-linux-musl.tar.gz && sudo cp ripgrep-<VERSION>-x86_64-unknown-linux-musl/rg /usr/local/bin/
command.default.screen = curl -LO https://ftp.gnu.org/gnu/screen/screen-<VERSION>.tar.gz && tar -xzvf screen-<VERSION>.tar.gz && cd screen-<VERSION> && ./configure && make && sudo make install
command.default.ag = curl -LO https://github.com/ggreer/the_silver_searcher/archive/refs/tags/<VERSION>.tar.gz && tar -xzvf <VERSION>.tar.gz && cd the_silver_searcher-<VERSION> && ./build.sh && sudo make install
command.default.httpie = curl -SsL https://packages.httpie.io/deb/KEY.gpg | sudo gpg --dearmor -o /usr/share/keyrings/httpie-archive-keyring.gpg && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/httpie-archive-keyring.gpg] https://packages.httpie.io/deb ./" | sudo tee /etc/apt/sources.list.d/httpie.list > /dev/null && sudo apt update && sudo apt install httpie
command.default.jq = curl -LO https://github.com/stedolan/jq/releases/download/jq-<VERSION>/jq-linux64 && chmod +x jq-linux64 && sudo mv jq-linux64 /usr/local/bin/jq

# Programming Languages and Frameworks
command.default.python = curl https://www.python.org/ftp/python/<VERSION>/Python-<VERSION>.tgz | tar xzf - && cd Python-<VERSION> && ./configure --enable-optimizations && make -j 8 && sudo make altinstall
command.default.node = curl -fsSL https://nodejs.org/dist/<VERSION>/node-<VERSION>-linux-x64.tar.xz | tar -xJf - -C /usr/local --strip-components=1
command.default.rust = curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
command.default.go = curl -LO https://golang.org/dl/go<VERSION>.linux-amd64.tar.gz && sudo tar -C /usr/local -xzf go<VERSION>.linux-amd64.tar.gz && echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.bashrc
command.default.ruby = curl -sSL https://get.rvm.io | bash -s stable --ruby
command.default.sdkman = curl -s "https://get.sdkman.io" | bash
command.default.django = pip install django
command.default.react = npx create-react-app my-app

# Databases
command.default.postgresql = curl https://ftp.postgresql.org/pub/source/v<VERSION>/postgresql-<VERSION>.tar.gz | tar xzf - && cd postgresql-<VERSION> && ./configure && make && sudo make install
command.default.mongodb = curl -LO https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-<VERSION>.tgz && tar -xvf mongodb-linux-x86_64-<VERSION>.tgz && sudo mv mongodb-linux-x86_64-<VERSION> /usr/local/mongodb
command.default.mysql = curl -LO https://dev.mysql.com/get/mysql-apt-config_<VERSION>-1_all.deb && sudo dpkg -i mysql-apt-config_<VERSION>-1_all.deb && sudo apt-get update && sudo apt-get install mysql-server
command.default.redis = curl -LO http://download.redis.io/redis-stable.tar.gz && tar xzf redis-stable.tar.gz && cd redis-stable && make && sudo make install

# Containers and Virtualization
command.default.docker = curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
command.default.docker_compose = sudo curl -L "https://github.com/docker/compose/releases/download/<VERSION>/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
command.default.vagrant = curl -O https://releases.hashicorp.com/vagrant/<VERSION>/vagrant_<VERSION>_x86_64.deb && sudo dpkg -i vagrant_<VERSION>_x86_64.deb
command.default.minikube = curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && sudo install minikube-linux-amd64 /usr/local/bin/minikube

# Cloud CLI Tools
command.default.awscli = curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && sudo ./aws/install
command.default.gcloud = curl https://sdk.cloud.google.com | bash && exec -l $SHELL
command.default.kubectl = curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
command.default.azure_cli = curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
command.default.terraform = curl -LO https://releases.hashicorp.com/terraform/<VERSION>/terraform_<VERSION>_linux_amd64.zip && unzip terraform_<VERSION>_linux_amd64.zip && sudo mv terraform /usr/local/bin/

# Security Tools
command.default.gpg = curl https://gnupg.org/ftp/gcrypt/gnupg/gnupg-<VERSION>.tar.bz2 | tar xjf - && cd gnupg-<VERSION> && ./configure && make && sudo make install
command.default.bitwarden_cli = npm install -g @bitwarden/cli
command.default.age = curl -LO https://github.com/FiloSottile/age/releases/download/v<VERSION>/age-v<VERSION>-linux-amd64.tar.gz && tar -xzvf age-v<VERSION>-linux-amd64.tar.gz && sudo mv age/age /usr/local/bin/

# Documentation Tools
command.default.hugo = curl -L https://github.com/gohugoio/hugo/releases/download/v<VERSION>/hugo_<VERSION>_Linux-64bit.tar.gz | tar xzf - && sudo mv hugo /usr/local/bin/
command.default.mkdocs = pip install mkdocs
command.default.plantuml = curl -LO https://github.com/plantuml/plantuml/releases/download/v<VERSION>/plantuml-<VERSION>.jar

# Build and CI/CD Tools
command.default.maven = curl https://downloads.apache.org/maven/maven-3/<VERSION>/binaries/apache-maven-<VERSION>-bin.tar.gz | tar xzf - && sudo mv apache-maven-<VERSION> /opt/maven && echo "export PATH=$PATH:/opt/maven/bin" >> ~/.bashrc
command.default.gradle = curl -L https://services.gradle.org/distributions/gradle-<VERSION>-bin.zip -o gradle.zip && unzip gradle.zip && sudo mv gradle-<VERSION> /opt/gradle && echo "export PATH=$PATH:/opt/gradle/bin" >> ~/.bashrc
command.default.jenkins = wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add - && sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list' && sudo apt update && sudo apt install jenkins
command.default.sonarqube = curl -LO https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-<VERSION>.zip && unzip sonarqube-<VERSION>.zip && mv sonarqube-<VERSION> /opt/sonarqube

# Communication and Collaboration
command.default.discord = curl -LO "https://discord.com/api/download?platform=linux&format=deb" -o discord.deb && sudo dpkg -i discord.deb
command.default.zoom = curl -LO https://zoom.us/client/latest/zoom_amd64.deb && sudo dpkg -i zoom_amd64.deb

# Design and UI/UX Tools
command.default.gimp = sudo add-apt-repository ppa:otto-kesselgulasch/gimp && sudo apt update && sudo apt install gimp
command.default.inkscape = sudo add-apt-repository ppa:inkscape.dev/stable && sudo apt update && sudo apt install inkscape

# Backup and Sync Tools
command.default.syncthing = curl -s https://syncthing.net/release-key.txt | sudo apt-key add - && echo "deb https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list && sudo apt update && sudo apt install syncthing
command.default.borgbackup = sudo apt install borgbackup

# Windows-specific applications
command.default.windows.chocolatey = Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
command.default.windows.powershell = iex "& { $(irm https://aka.ms/install-powershell.ps1) } -UseMSI"
command.default.windows.putty = choco install putty
command.default.windows.wsl = wsl --install
command.default.windows.git_bash = choco install git.install